@page "/datagrid-dynamic"
@using System.Linq.Dynamic.Core
<h1>DataGrid <strong>dynamic</strong> data support</h1>

<p>
    Sometimes your data comes from external API and you don't have a C# model for it. This demo shows how to implement such a scenario.
</p>

<RadzenExample Name="DataGrid" Source="DataGridDynamicData" Heading="false">
    <RadzenDataGrid Data="@data" Count="@count"  LoadData="@LoadData" TItem="IDictionary<string, object>"
                         AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" AllowPaging="true" AllowSorting="true">
            <Columns>
                @foreach(var column in columns)
                {
                    <RadzenDataGridColumn TItem="IDictionary<string, object>" Title="@column.Key" Type="column.Value"
                            Property="@GetColumnPropertyExpression(column.Key, column.Value)" >
                        <Template>
                            @context[@column.Key]
                        </Template>
                    </RadzenDataGridColumn>
                }
        </Columns>
        </RadzenDataGrid>
</RadzenExample>
@code {
    public static IEnumerable<IDictionary<string, object>> rows { get; set; } = Enumerable.Range(0, 100).Select(i =>
    {
        var row = new Dictionary<string, object>();

        foreach (var column in columns)
        {
            row.Add(column.Key, column.Value == typeof(int) ? i : $"{column.Key}{i}");
        }

        return row;
    });

    public static IDictionary<string, Type> columns { get; set; } = new Dictionary<string, Type>() 
    { 
        { "EmployeeID", typeof(int) },
        { "FirstName", typeof(string) },
        { "LastName", typeof(string) },
    };

    public string GetColumnPropertyExpression(string name, Type type)
    {
        var expression = $@"it[""{name}""].ToString()";
        return type == typeof(int) ? $"int.Parse({expression})" : expression;
    }

    public IEnumerable<IDictionary<string, object>> data { get; set; }
    public int count { get; set; }

    public async Task LoadData(LoadDataArgs args)
    {
        var query = rows.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();

        // Perform paging via Skip and Take.
        data = await Task.FromResult(query.Skip(args.Skip.Value).Take(args.Top.Value).ToList());
    }
}