@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime

<RadzenButton Text="Run" Click="@Run" />

<div id="container" style="height:500px;border:1px solid black;"></div>

@if (childContent != null)
{
    @childContent
}

@code {
    private ElementReference pre;
    private string source;
    private RenderFragment childContent;

    [Parameter]
    public string PageName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var http = new HttpClient();

        source = await http.GetStringAsync($"https://raw.githubusercontent.com/radzenhq/radzen-blazor/master/RadzenBlazorDemos/Pages/{PageName}");
        source = Regex.Replace(source, "</?RadzenExample[^>]*>\n", "");
    }

    async Task Run()
    {
        var newSource = await JSRuntime.InvokeAsync<string>("window.editor.getValue");
        if (!String.IsNullOrEmpty(newSource))
        {
            var compiler = new Compiler();
            Type compiledType = null;

            try
            {
                compiledType = compiler.Compile(newSource);
            }
            catch
            {
                
            }

            if (compiledType != null)
            {
                childContent = new RenderFragment(builder =>
                {
                    builder.OpenComponent(0, compiledType);

                    builder.CloseComponent();
                });
            }
        }
    }

    bool editorCreated;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!String.IsNullOrEmpty(source) && !editorCreated)
        {
            await JSRuntime.InvokeVoidAsync("eval", "window.editor = monaco.editor.create(document.getElementById('container'), { language: 'razor', theme: 'vs' });");

            await JSRuntime.InvokeVoidAsync("window.editor.setValue", source);

            editorCreated = true;
        }
    }
}
